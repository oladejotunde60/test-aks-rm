trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa
stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@1
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendServiceArm: 'Azure subscription Sandbox-CSP'
          backendAzureRmResourceGroupName: 'self-hosted-vm-rg'
          backendAzureRmStorageAccountName: 'selfhosted19600'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
      - task: TerraformTaskV4@4
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
- stage: DeployAKSClusters
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadSecureFile@1
                displayName: Download SSH Key
                name: sshkey
                inputs:
                  secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              - task: TerraformTaskV4@4
                displayName: Terraform Init
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendServiceArm: 'Azure subscription Sandbox-CSP'
                  backendAzureRmResourceGroupName: 'self-hosted-vm-rg'
                  backendAzureRmStorageAccountName: 'selfhosted19600'
                  backendAzureRmContainerName: 'tfstatefiles'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
              - task: TerraformTaskV4@4
                displayName: Terraform Plan
                inputs:
                  provider: 'azurerm'
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath)  -var environment=$(DEV_ENVIRONMENT)  -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  environmentServiceNameAzureRM: 'Azure subscription Sandbox-CSP'
              - task: TerraformTaskV4@4
                displayName: Terraform Apply
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  environmentServiceNameAzureRM: 'Azure subscription Sandbox-CSP'
